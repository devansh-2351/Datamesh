// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: Datamesh/proto/datamesh.proto

package datameshpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsensusService_GetStatus_FullMethodName = "/datamesh.ConsensusService/GetStatus"
)

// ConsensusServiceClient is the client API for ConsensusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Consensus service
type ConsensusServiceClient interface {
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type consensusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusServiceClient(cc grpc.ClientConnInterface) ConsensusServiceClient {
	return &consensusServiceClient{cc}
}

func (c *consensusServiceClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ConsensusService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsensusServiceServer is the server API for ConsensusService service.
// All implementations must embed UnimplementedConsensusServiceServer
// for forward compatibility.
//
// Consensus service
type ConsensusServiceServer interface {
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedConsensusServiceServer()
}

// UnimplementedConsensusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsensusServiceServer struct{}

func (UnimplementedConsensusServiceServer) GetStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedConsensusServiceServer) mustEmbedUnimplementedConsensusServiceServer() {}
func (UnimplementedConsensusServiceServer) testEmbeddedByValue()                          {}

// UnsafeConsensusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusServiceServer will
// result in compilation errors.
type UnsafeConsensusServiceServer interface {
	mustEmbedUnimplementedConsensusServiceServer()
}

func RegisterConsensusServiceServer(s grpc.ServiceRegistrar, srv ConsensusServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsensusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsensusService_ServiceDesc, srv)
}

func _ConsensusService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsensusService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsensusService_ServiceDesc is the grpc.ServiceDesc for ConsensusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsensusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datamesh.ConsensusService",
	HandlerType: (*ConsensusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _ConsensusService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Datamesh/proto/datamesh.proto",
}

const (
	DAService_PostBlob_FullMethodName   = "/datamesh.DAService/PostBlob"
	DAService_SampleBlob_FullMethodName = "/datamesh.DAService/SampleBlob"
)

// DAServiceClient is the client API for DAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Data Availability service
type DAServiceClient interface {
	PostBlob(ctx context.Context, in *PostBlobRequest, opts ...grpc.CallOption) (*PostBlobResponse, error)
	SampleBlob(ctx context.Context, in *SampleBlobRequest, opts ...grpc.CallOption) (*SampleBlobResponse, error)
}

type dAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDAServiceClient(cc grpc.ClientConnInterface) DAServiceClient {
	return &dAServiceClient{cc}
}

func (c *dAServiceClient) PostBlob(ctx context.Context, in *PostBlobRequest, opts ...grpc.CallOption) (*PostBlobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostBlobResponse)
	err := c.cc.Invoke(ctx, DAService_PostBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAServiceClient) SampleBlob(ctx context.Context, in *SampleBlobRequest, opts ...grpc.CallOption) (*SampleBlobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SampleBlobResponse)
	err := c.cc.Invoke(ctx, DAService_SampleBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DAServiceServer is the server API for DAService service.
// All implementations must embed UnimplementedDAServiceServer
// for forward compatibility.
//
// Data Availability service
type DAServiceServer interface {
	PostBlob(context.Context, *PostBlobRequest) (*PostBlobResponse, error)
	SampleBlob(context.Context, *SampleBlobRequest) (*SampleBlobResponse, error)
	mustEmbedUnimplementedDAServiceServer()
}

// UnimplementedDAServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDAServiceServer struct{}

func (UnimplementedDAServiceServer) PostBlob(context.Context, *PostBlobRequest) (*PostBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBlob not implemented")
}
func (UnimplementedDAServiceServer) SampleBlob(context.Context, *SampleBlobRequest) (*SampleBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SampleBlob not implemented")
}
func (UnimplementedDAServiceServer) mustEmbedUnimplementedDAServiceServer() {}
func (UnimplementedDAServiceServer) testEmbeddedByValue()                   {}

// UnsafeDAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DAServiceServer will
// result in compilation errors.
type UnsafeDAServiceServer interface {
	mustEmbedUnimplementedDAServiceServer()
}

func RegisterDAServiceServer(s grpc.ServiceRegistrar, srv DAServiceServer) {
	// If the following call pancis, it indicates UnimplementedDAServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DAService_ServiceDesc, srv)
}

func _DAService_PostBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAServiceServer).PostBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAService_PostBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAServiceServer).PostBlob(ctx, req.(*PostBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAService_SampleBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAServiceServer).SampleBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DAService_SampleBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAServiceServer).SampleBlob(ctx, req.(*SampleBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DAService_ServiceDesc is the grpc.ServiceDesc for DAService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DAService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datamesh.DAService",
	HandlerType: (*DAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostBlob",
			Handler:    _DAService_PostBlob_Handler,
		},
		{
			MethodName: "SampleBlob",
			Handler:    _DAService_SampleBlob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Datamesh/proto/datamesh.proto",
}

const (
	ExecutionService_ExecuteTx_FullMethodName = "/datamesh.ExecutionService/ExecuteTx"
)

// ExecutionServiceClient is the client API for ExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Execution service
type ExecutionServiceClient interface {
	ExecuteTx(ctx context.Context, in *ExecuteTxRequest, opts ...grpc.CallOption) (*ExecuteTxResponse, error)
}

type executionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionServiceClient(cc grpc.ClientConnInterface) ExecutionServiceClient {
	return &executionServiceClient{cc}
}

func (c *executionServiceClient) ExecuteTx(ctx context.Context, in *ExecuteTxRequest, opts ...grpc.CallOption) (*ExecuteTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteTxResponse)
	err := c.cc.Invoke(ctx, ExecutionService_ExecuteTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionServiceServer is the server API for ExecutionService service.
// All implementations must embed UnimplementedExecutionServiceServer
// for forward compatibility.
//
// Execution service
type ExecutionServiceServer interface {
	ExecuteTx(context.Context, *ExecuteTxRequest) (*ExecuteTxResponse, error)
	mustEmbedUnimplementedExecutionServiceServer()
}

// UnimplementedExecutionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExecutionServiceServer struct{}

func (UnimplementedExecutionServiceServer) ExecuteTx(context.Context, *ExecuteTxRequest) (*ExecuteTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTx not implemented")
}
func (UnimplementedExecutionServiceServer) mustEmbedUnimplementedExecutionServiceServer() {}
func (UnimplementedExecutionServiceServer) testEmbeddedByValue()                          {}

// UnsafeExecutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionServiceServer will
// result in compilation errors.
type UnsafeExecutionServiceServer interface {
	mustEmbedUnimplementedExecutionServiceServer()
}

func RegisterExecutionServiceServer(s grpc.ServiceRegistrar, srv ExecutionServiceServer) {
	// If the following call pancis, it indicates UnimplementedExecutionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExecutionService_ServiceDesc, srv)
}

func _ExecutionService_ExecuteTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionServiceServer).ExecuteTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionService_ExecuteTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionServiceServer).ExecuteTx(ctx, req.(*ExecuteTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutionService_ServiceDesc is the grpc.ServiceDesc for ExecutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datamesh.ExecutionService",
	HandlerType: (*ExecutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTx",
			Handler:    _ExecutionService_ExecuteTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Datamesh/proto/datamesh.proto",
}
